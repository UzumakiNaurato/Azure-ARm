{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "Password or ssh key for the Virtual Machine."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for the resources."
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "linux-vm",
      "minLength": 3,
      "maxLength": 64,
      "metadata": {
        "description": "Name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A2_v2",
      "metadata": {
        "description": "Size for the Virtual Machine."
      }
    },
    "storageNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Determines whether or not a new storage account should be provisioned.  'none' disables boot diags."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('storage', uniqueString(parameters('vmName'), resourceGroup().id))]",
      "metadata": {
        "description": "Name of the storage account"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage account type for boot diagnostics, only LRS/GRS skus are allowed."
      }
    },
    "storageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing storage account"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "VirtualNetwork",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing virtual network"
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ],
      "metadata": {
        "description": "Determines whether or not a new public ip should be provisioned."
      }
    },
    "publicIpName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'), '-ip')]",
      "metadata": {
        "description": "Name of the public ip address"
      }
    },
    "publicIpDns": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'), uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "DNS of the public ip address for the VM"
      }
    },
    "publicIpResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the public ip address"
      }
    },
    "publicIpAllocationMethod": {
      "type": "string",
      "defaultValue": "Static",
      "allowedValues": [
        "Dynamic",
        "Static"
      ],
      "metadata": {
        "description": "Allocation method for the public ip address"
      }
    },
    "publicIpSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "metadata": {
        "description": "Name of the resource group for the public ip address"
      }
    },
    "operatingSystem": {
      "type": "string",
      "defaultValue": "UbuntuServer_18.04-LTS",
      "metadata": {
        "description": "Operating system to use for the virtual machine."
      },
      "allowedValues": [
        "UbuntuServer_18.04-LTS",
        "UbuntuServer_16.04-LTS",
        "WindowsServer_2019-DataCenter"
      ]
    },
    "dataDiskSizes": {
      "type": "array",
      "defaultValue": [
        128
      ],
      "metadata": {
        "description": "The array contains the size of each data disk.  The size of the array determines the number of data disks."
      }
    },
    "zones": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Zones to be used for the VM."
      }
    },
    "availabilitySetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the availabilitySet to use"
      }
    },
    "managedIdentity": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "UserAssigned",
        "SystemAssigned",
        "None"
      ],
      "metadata": {
        "description": "Managed identity type, if UserAssigned, the value of the UserAssignedIdentity parameter must also be set."
      }
    },
    "userAssignedIdentity": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resourceId of the user assigned managed identity to assign to the virtual machine."
      }
    },
    "managedIdentityRoleDefinitionIds": {
      "type": "array",
      "defaultValue": [ //need a default until #4830897 is deployed
        {
          "scope": "[resourceGroup().id]",
          "role": "b24988ac-6180-42a0-ab88-20f7382dd24c" //contributor
        }
      ],
      "metadata": {
        "description": "The resourceId of the role definition to assign to the managed identity.  The user deploying the template must have permission to assign roles to the VM. Only applicable when using a SystemAssigned identity."
      }
    },
    "validateManagedIdentity": {
      "type": "bool",
      "allowedValues": [
        true
      ],
      "defaultValue": "[if(and(equals(parameters('managedIdentity'),'UserAssigned'), empty(parameters('userAssignedIdentity'))), bool('false'), bool('true'))]",
      "metadata": {
        "description": "Check to ensure that if a managedIdentity type is UserAssigned that UserAssignedIdenity parameters is not empty."
      }
    },
    "validateAvailabilitySet": {
      "type": "bool",
      "allowedValues": [
        true
      ],
      "defaultValue": "[if(and(not(empty(parameters('zones'))), not(empty(parameters('availabilitySetName')))), bool('false'), bool('true'))]",
      "metadata": {
        "description": "Check to ensure deployment is not using both Zones and AS."
      }
    },
    "validateZones": {
      "type": "bool",
      "allowedValues": [
        true
      ],
      "defaultValue": "[if(and(not(empty(parameters('zones'))), not(equals(toLower(parameters('publicIpSku')), 'standard'))), bool('false'), bool('true'))]",
      "metadata": {
        "description": "Check to see if the publicIp SKU is Standard when using zones."
      }
    },
    "debug": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "When set will output some template information useful for debugging"
      }
    }
  },
  "variables": {
    "isWindowsOS": "[bool(contains(toLower(variables('imageReference')[parameters('operatingSystem')].offer), 'windows'))]",
    "imageReference": {
      "UbuntuServer_16.04-LTS": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04-LTS",
        "version": "latest"
      },
      "UbuntuServer_18.04-LTS": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "18.04-LTS",
        "version": "latest"
      },
      "WindowsServer_2016-DataCenter": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2016-Datacenter",
        "version": "latest"
      }
    },
    "windowsConfiguration": {
      "provisionVmAgent": "true"
    },
    "enableBootDiags": "[not(equals(parameters('storageNewOrExisting'), 'none'))]",
    "storageAccountId": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
    "nicName": "[concat(parameters('vmName'), '-nic')]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordOrKey')]"
          }
        ]
      }
    },
    "publicIpAddressId": {
      "id": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
    },
    "availabilitySet": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName'))]"
    },
    "userAssignedIdentites": {
      "[parameters('userAssignedIdentity')]": {
      }
    }
  },
  "resources": [
    {
      "condition": "[not(empty(parameters('availabilitySetName')))]",
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "2019-07-01",
      "name": "[if(not(empty(parameters('availabilitySetName'))), parameters('availabilitySetName'), 'none')]", //resources must have a name
      "location": "[parameters('location')]",
      "properties": {
        "PlatformUpdateDomainCount": 2,
        "PlatformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[equals(parameters('storageNewOrExisting'), 'new')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      }
    },
    {
      "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2019-09-01",
      "name": "[parameters('publicIpName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('publicIpSku')]"
      },
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIpAllocationMethod')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('publicIpDns')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2019-09-01",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', parameters('publicIpName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]"
              },
              "publicIPAddress": "[if(not(equals(parameters('publicIpNewOrExisting'), 'none')), variables('publicIpAddressId'), json('null'))]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2019-07-01",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[variables('nicName')]"
      ],
      "identity": {
        "type": "[parameters('managedIdentity')]",
        "userAssignedIdentities": "[if(equals(parameters('managedIdentity'), 'UserAssigned'), variables('userAssignedIdentites'), json('null'))]"
      },
      "zones": "[if(empty(parameters('zones')), json('null'), array(parameters('zones')))]",
      "properties": {
        "availabilitySet": "[if(empty(parameters('availabilitySetName')), json('null'), variables('availabilitySet'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(and(not(variables('isWindowsOS')), equals(parameters('authenticationType'), 'sshPublicKey')), variables('linuxConfiguration'), json('null'))]",
          "windowsConfiguration": "[if(variables('isWindowsOS'), variables('windowsConfiguration'), json('null'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')[parameters('operatingSystem')]]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "copy": [
            {
              "name": "dataDisks",
              "count": "[length(parameters('dataDiskSizes'))]",
              "input": {
                "diskSizeGB": "[parameters('dataDiskSizes')[copyIndex('dataDisks')]]",
                "lun": "[copyIndex('dataDisks')]",
                "createOption": "Empty"
              }
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('enableBootDiags')]",
            "storageUri": "[if(variables('enableBootDiags'), reference(variables('storageAccountId'), '2019-06-01').primaryEndpoints.blob, json('null'))]"
          }
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('managedIdentityRoleDefinitionIds'))), equals(parameters('managedIdentity'), 'SystemAssigned'))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2019-04-01-preview",
      "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), string(copyIndex()))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
      ],
      "copy": {
        "name": "roleAssignments",
        "count": "[length(parameters('managedIdentityRoleDefinitionIds'))]"
      },
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2019-07-01', 'Full').identity.principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('managedIdentityRoleDefinitionIds')[copyIndex()].role)]",
        "scope": "[parameters('managedIdentityRoleDefinitionIds')[copyIndex()].scope]",
        "principalType": "ServicePrincipal"
      }
    }
  ],
  "outputs": {
    "ssh-command": {
      "type": "string",
      "value": "[if(equals(parameters('publicIpNewOrExisting'), 'none'), 'no public ip', reference(resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName')), '2019-09-01').dnsSettings.fqdn)]"
    },
    "debug": {
      "condition": "[parameters('debug')]",
      "type": "object",
      "value": {
        "validateAvailabilitySet": "[parameters('validateAvailabilitySet')]",
        "validateZones": "[parameters('validateZones')]",
        "validateManagedIdentity": "[parameters('validateManagedIdentity')]"
      }
    }
  }
}